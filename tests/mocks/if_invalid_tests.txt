FileAST(ext=[FuncDef(decl=Decl(name='invalid_true', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=FuncDecl(args=ParamList(params=[Decl(name='x', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='x', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='y', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='y', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='z', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='z', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ) ] ), type=TypeDecl(declname='invalid_true', quals=[ ], align=None, type=IdentifierType(names=['void' ] ) ) ), init=None, bitsize=None ), param_decls=None, body=Compound(block_items=[If(cond=ID(name='true' ), iftrue=Assignment(op='=', lvalue=ID(name='x' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='x' ) ), right=Constant(type='int', value='1' ) ) ), iffalse=Assignment(op='=', lvalue=ID(name='w' ), rvalue=BinaryOp(op='+', left=ID(name='z' ), right=Constant(type='int', value='1' ) ) ) ) ] ) ), FuncDef(decl=Decl(name='partially_invalid_true', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=FuncDecl(args=ParamList(params=[Decl(name='x', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='x', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='y', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='y', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='z', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='z', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ) ] ), type=TypeDecl(declname='partially_invalid_true', quals=[ ], align=None, type=IdentifierType(names=['void' ] ) ) ), init=None, bitsize=None ), param_decls=None, body=Compound(block_items=[If(cond=ID(name='true' ), iftrue=Compound(block_items=[Assignment(op='=', lvalue=ID(name='y' ), rvalue=BinaryOp(op='+', left=ID(name='x' ), right=ID(name='y' ) ) ), Assignment(op='=', lvalue=ID(name='x' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='x' ) ), right=Constant(type='int', value='1' ) ) ) ] ), iffalse=Assignment(op='=', lvalue=ID(name='w' ), rvalue=BinaryOp(op='+', left=ID(name='z' ), right=Constant(type='int', value='1' ) ) ) ) ] ) ), FuncDef(decl=Decl(name='invalid_else', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=FuncDecl(args=ParamList(params=[Decl(name='x', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='x', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='y', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='y', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='z', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='z', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ) ] ), type=TypeDecl(declname='invalid_else', quals=[ ], align=None, type=IdentifierType(names=['void' ] ) ) ), init=None, bitsize=None ), param_decls=None, body=Compound(block_items=[If(cond=ID(name='true' ), iftrue=Assignment(op='=', lvalue=ID(name='x' ), rvalue=BinaryOp(op='+', left=ID(name='x' ), right=Constant(type='int', value='1' ) ) ), iffalse=Assignment(op='=', lvalue=ID(name='w' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='z' ) ), right=Constant(type='int', value='1' ) ) ) ) ] ) ), FuncDef(decl=Decl(name='partially_invalid_else', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=FuncDecl(args=ParamList(params=[Decl(name='x', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='x', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='y', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='y', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='z', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='z', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ) ] ), type=TypeDecl(declname='partially_invalid_else', quals=[ ], align=None, type=IdentifierType(names=['void' ] ) ) ), init=None, bitsize=None ), param_decls=None, body=Compound(block_items=[If(cond=ID(name='true' ), iftrue=Assignment(op='=', lvalue=ID(name='x' ), rvalue=BinaryOp(op='+', left=ID(name='x' ), right=Constant(type='int', value='1' ) ) ), iffalse=Compound(block_items=[Assignment(op='=', lvalue=ID(name='z' ), rvalue=BinaryOp(op='+', left=ID(name='z' ), right=Constant(type='int', value='1' ) ) ), Assignment(op='=', lvalue=ID(name='w' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='z' ) ), right=Constant(type='int', value='1' ) ) ) ] ) ) ] ) ), FuncDef(decl=Decl(name='invalid_branches', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=FuncDecl(args=ParamList(params=[Decl(name='x', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='x', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='y', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='y', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ), Decl(name='z', quals=[ ], align=[ ], storage=[ ], funcspec=[ ], type=TypeDecl(declname='z', quals=[ ], align=None, type=IdentifierType(names=['int' ] ) ), init=None, bitsize=None ) ] ), type=TypeDecl(declname='invalid_branches', quals=[ ], align=None, type=IdentifierType(names=['void' ] ) ) ), init=None, bitsize=None ), param_decls=None, body=Compound(block_items=[If(cond=ID(name='true' ), iftrue=Assignment(op='=', lvalue=ID(name='x' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='x' ) ), right=Constant(type='int', value='1' ) ) ), iffalse=Assignment(op='=', lvalue=ID(name='w' ), rvalue=BinaryOp(op='+', left=UnaryOp(op='*', expr=ID(name='z' ) ), right=Constant(type='int', value='1' ) ) ) ) ] ) ) ] )