"""Sample ASTs for unit testing"""

from pycparser.c_ast import FileAST, FuncDef, Decl, FuncDecl, TypeDecl, \
    IdentifierType, Compound, Constant, While, BinaryOp, ID, Assignment

# AST generated by pycparser for empty_main.c
EMPTY_MAIN = FileAST(
    ext=[FuncDef(decl=Decl(
        name='main', quals=[], storage=[],
        funcspec=[],
        type=FuncDecl(
            args=None,
            type=TypeDecl(
                declname='main',
                quals=[],
                type=IdentifierType(
                    names=['int']))),
        init=None, bitsize=None),
        param_decls=None,
        body=Compound(block_items=None))])

# AST generated by pycparser for infinite_2.c
INFINITE_2C = FileAST(ext=[FuncDef(
    decl=Decl(name='main', quals=[],
              storage=[],
              funcspec=[],
              type=FuncDecl(
                  args=None, type=TypeDecl(
                      declname='main', quals=[],
                      type=IdentifierType(
                          names=['int']))),
              init=None, bitsize=None),
    param_decls=None, body=Compound(
        block_items=[Decl(name='X0',
                          quals=[],
                          storage=[],
                          funcspec=[],
                          type=TypeDecl(
                              declname='X0', quals=[],
                              type=IdentifierType(names=['int'])),
                          init=Constant(type='int', value='1'),
                          bitsize=None),
                     Decl(name='X1',
                          quals=[],
                          storage=[],
                          funcspec=[],
                          type=TypeDecl(declname='X1', quals=[],
                                        type=IdentifierType(names=['int'])),
                          init=Constant(type='int', value='1'),
                          bitsize=None
                          ),
                     While(cond=BinaryOp(
                         op='<',
                         left=ID(name='X1'),
                         right=Constant(type='int', value='10')),
                         stmt=Compound(block_items=[
                             Assignment(op='=',
                                        lvalue=ID(name='X0'),
                                        rvalue=
                                        BinaryOp(op='*',
                                                 left=ID(name='X1'),
                                                 right=ID(name='X0'))),
                             Assignment(
                                 op='=',
                                 lvalue=ID(
                                     name='X1'),
                                 rvalue=BinaryOp(
                                     op='+',
                                     left=ID(
                                         name='X1'),
                                     right=ID(
                                         name='X0')))]))]))])
